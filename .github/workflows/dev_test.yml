name: Deploy to Dev

# on: workflow_dispatch # This works only on default branch, to be enabled when we merge
on: push

jobs:
  deployment:
    name: Deployment
    runs-on: ubuntu-18.04
    environment: dev
    env:
      APP_ID: decent-digit-629
      NODE_ENV: production
      DB_PORT: 3306
      GKE_ZONE: europe-west1-b
      # RECAPTCHA_STAGING_PUBLIC_KEY: ${{ secrets.RECAPTCHA_STAGING_PUBLIC_KEY }}
      # RECAPTCHA_STAGING_PRIVATE_KEY: ${{ secrets.RECAPTCHA_STAGING_PRIVATE_KEY }}
      # TODO: add secrets from semaphore
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v2'

      # - name: 'Deployment pending'
      #   uses: 'deliverybot/status@master'
      #   with:
      #     state: 'pending'
      #     token: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'Setup python'
        uses: actions/setup-python@v2
        with:
          python-version: '3.7.x'
          architecture: 'x64'

      - name: Create /tmp/cloudsql directory
        run: mkdir -p /tmp/cloudsql
      
      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GCLOUD_AUTH }}
          project_id: ${{ env.APP_ID }}
          export_default_credentials: true
          credentials_file_path: /tmp/cloudsql/key.json
        
      # # Actual deployment
      # - name: 'Deploy ${{ github.event.deployment.environment }}'
      #   run: |
      #     echo "task - ${{ github.event.deployment.task }}"
      #     echo "environment - ${{ github.event.deployment.environment }}"
      #     echo "payload - ${{ toJson(github.event.deployment.payload) }}"
      #     ls
      
      # - name: 'Setup MySQL'
      #   run: |
      #     sudo apt-get install libmysqlclient-dev
      #     pip install mysqlclient==1.4.*
      
      # - name: 'Install kubernetes'
      #   run: pip install kubernetes
      
      # - name: 'Build'
      #   run: ./build.sh dev
      
      # - name: 'Restart MySQL'
      #   run: |
      #     sudo sed -i '/\[mysqld\]/assl = 1' /etc/mysql/mysql.conf.d/mysqld.cnf
      #     sudo service mysql restart

      # - name: 'Get cluster credentials'
      #   # run: |-
      #   #   gcloud container clusters get-credentials ${{ github.event.deployment.environment }} --zone "$GKE_ZONE"
      #   run: |-
      #     gcloud container clusters get-credentials "dev" --zone "$GKE_ZONE"
      
      # - name: 'Deploy k8s'
      #   # run: python clusters_setup/deploy.py ${{ github.event.deployment.environment }}
      #   run: python clusters_setup/deploy.py "dev"
      
      - name: 'Deploy'
        env:
          REDIS_IP: ${{ secrets.REDIS_IP }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
        run: |
          # start cloudsql-proxy container
          # docker run -d --net host --name cloudsql-proxy --restart on-failure \
          #   -v /tmp/cloudsql:/tmp/cloudsql \
          #   gcr.io/cloudsql-docker/gce-proxy:1.19.1 \
          #   /cloud_sql_proxy \
          #     -credential_file /tmp/cloudsql/key.json \
          #     -dir /tmp/cloudsql

          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O /tmp/cloud_sql_proxy
          chmod +x /tmp/cloud_sql_proxy

          sudo ./tmp/cloud_sql_proxy -dir=/cloudsql &
          
          # wait for cloudsql-proxy to be ready
          for i in {1..10}; do
              echo "Waiting for cloudsql-proxy to be ready $i/10"
              if mysqladmin -S /cloudsql/decent-digit-629:europe-west1:db ping; then
                echo "cloudsql-proxy is ready"
                break
              fi
              sleep 2
          done

          # TODO
          exit 1

      # - name: 'Deploy'
      #   env:
      #     CLOUD_SQL_HOST: ${{ secrets.CLOUD_SQL_HOST }}
      #     CLOUD_SQL_PASSWORD: ${{ secrets.CLOUD_SQL_PASSWORD }}
      #     REDIS_IP: ${{ secrets.REDIS_IP }}
      #     REDIS_PORT: ${{ secrets.REDIS_PORT }}
      #   run: ./deploy.sh dev ${{ github.run_number }} dev

      # - name: 'Deployment success'
      #   if: success()
      #   uses: 'deliverybot/status@master'
      #   with:
      #     state: 'success'
      #     token: '${{ secrets.GITHUB_TOKEN }}'

      # - name: 'Deployment failure'
      #   if: failure()
      #   uses: 'deliverybot/status@master'
      #   with:
      #     state: 'failure'
      #     token: '${{ secrets.GITHUB_TOKEN }}'
